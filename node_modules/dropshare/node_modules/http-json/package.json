{
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com",
    "url": "http://coolaj86.info/"
  },
  "name": "http-json",
  "description": "An extension of the http prototype supporting steve-style json responses in connect",
  "version": "1.2.2",
  "homepage": "http://github.com/coolaj86/steve",
  "repository": {
    "type": "git",
    "url": "git://github.com/coolaj86/steve.git"
  },
  "publishConfig": {
    "registry": "http://registry.npmjs.org"
  },
  "main": "index",
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "http-json\n===\n\nA `connect` / `http` module which extends `http.ServerResponse.prototype`.\n\nUsage\n===\n\n    (function () {\n      \"use strict\";\n\n      require('http-json').init(require('http'));\n\n      var connect = require('connect')\n        ;\n\n      connect().use(function () {\n        res.meta('foo-secret', 42);\n\n        // Randomly generate an error\n        if (Date.now() % 3) {\n          res.error(new Error(\"What time is it? Error time!\"));\n          res.json();\n          return;\n        } else {\n          res.warn(new Error(\"Did you know that 1 out of 3 times is error time?\"));\n        }\n\n        res.json(\"What time is it? Success time!\");\n      }).listen(2323);\n      // http://localhost:2323/\n\n    }());\n\nResponse\n---\n\n    {\n        \"success\": true\n      , \"errors\": []\n      , \"warnings\": [{\"message\":\"Did you know that 1 out of 3 times is error time?\"}]\n      , \"foo-secret\": 42\n      , \"timestamp\": 1339631260781\n      , \"result\": \"What time is it? Success time!\"\n    }\n\nAPI\n===\n\nhttp.ServerResponse.prototype.json(result, params)\n---\n\nPass in some `result` object to be attached as `result`\n\n  * sets `Content-Type: application/json; charset=utf-8`\n  * calls `res.write(JSON.stringify({ timestamp: Date.now(), result: result, ... }))`\n  * calls `res.end()`\n\nOptional `params` may be an object such as this\n\n    {\n        debug: false        // set `true` if the response should be pretty-printed\n                            // also, stack traces should not be removed\n      , stringified: false  // set `true` if the result is already `JSON.stringify()`'d\n    }\n\nhttp.ServerResponse.prototype.meta(key, value)\n---\n\nAdd a field to the \"header\" (sibling of `result`, `errors`, etc)\n\nhttp.ServerResponse.prototype.warn(Error)\n---\n\nAdd an Error to the `warnings` array, but `success` is left as true.\n\n`Error` may also be `null`/`undefined` (ignored), an array of Errors, or an empty array (ignored).\n\n**Note**: By default, stack traces will be removed from warnings.\n\nhttp.ServerResponse.prototype.error(Error)\n---\n\nAdd an Error to the `errors` array and set `success` to false.\n\n`Error` may also be `null`/`undefined` (ignored), an array of Errors, or an empty array (ignored).\n\n**Note**: By default, stack traces will be removed from errors.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/coolaj86/steve/issues"
  },
  "_id": "http-json@1.2.2",
  "dist": {
    "shasum": "dde61c77454a152e03b99b0fb149d8190ca080c5"
  },
  "_from": "http-json@1.x",
  "_resolved": "https://registry.npmjs.org/http-json/-/http-json-1.2.2.tgz"
}
