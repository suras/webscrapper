{
  "author": {
    "name": "Antono Vasiljev",
    "email": "antono.vasiljev@gmail.com",
    "url": "http://antono.info"
  },
  "contributors": [
    {
      "name": "AJ ONeal",
      "email": "coolaj86@gmail.com",
      "url": "http://coolaj86.info"
    }
  ],
  "name": "connect-cors",
  "description": "CORS / XHR2 support for Node.JS's Connect",
  "version": "0.5.1",
  "homepage": "https://github.com/antono/connect-cors",
  "repository": {
    "type": "git",
    "url": "git://github.com/antono/connect-cors.git"
  },
  "main": "./lib/connect-cors.js",
  "engines": {
    "node": ">= 0.4.0"
  },
  "dependencies": {
    "connect": ">= 1.6.4"
  },
  "devDependencies": {
    "jasmine-node": ">= 1.0.6"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "readme": "Connect CORS\n====\n\nv0.5.0\n\nA CORS module for Node.JS's Connect\n\n\n\"pre-flighted\" OPTIONS requests are supported\n\n\nInstallation\n===\n\nCurrent Version:\n\n    npm install connect-xcors\n\nAntono's original (different API):\n\n    npm install connect-cors\n\nUsage\n===\n\n\n    var Connect = require('connect')\n      , CORS = require('connect-xcors')\n    //, CORS = require('connect-cors') // Antono's original\n      , options = {}\n      , server\n      ;\n     \n    server = Connect.createServer(\n        // uses reasonable defaults when no options are given\n        CORS(options)\n      , function(req, res) {\n          res.writeHead(200, { 'Content-Type': 'text/plain' });\n          res.end('Hello World');\n        }\n    );\n\n    // the `options` object will be popullated with empty arrays\n    // and is live-editable (great for testing and dynamic APIs)\n    console.log(options);\n\n    server.listen(9000);\n\n**Known Issues**\n\n  * \"pre-flighted\" OPTIONS requests and \"actual\" requests are treated the same. This doesn't seem to have any adverse affects, it just wastes bytes.\n\n\nOptions\n===\n\nThese are the default options when no options are specified.\n\nThe options are hot-editable. You can dynamically add origins, resources, etc.\n\n    var options = {\n            origins: []                       // implicit same as ['*'], and null\n          , methods: ['HEAD', 'GET', 'POST']  // OPTIONS is always allowed\n          , headers: [                        // both `Exposed` and `Allowed` headers\n                'X-Requested-With'\n              , 'X-HTTP-Method-Override'\n              , 'Content-Type'\n              , 'Accept'\n            ]\n          , credentials: false                // don't allow Credentials\n          , resources: [\n              {\n                  pattern: '/'                // a string prefix or RegExp\n              //, origins\n              //, methods\n              //, headers\n              //, credentials\n              }\n            ]\n        };\n\n\nExplanation\n---\n\nBy default the defaults will be used.\n\nIf the top-level options are present, they will be used for any resource which does not specify its own\n\nResource-level directives override top-level directives\n\norigins\n---\n\nan array of origins. `undefined`, `null`, `[]`, and `['*']` will all default to '*'\n\n  * Example: `['http://example.com', 'http://domain.tld']`\n  * Browsers will see their origin exactly `Access-Control-Allow-Origin: http://example.com` (even if ['*'] is used)\n  * MSIE will see `Access-Control-Allow-Origin: *`, for the allowed origins. (`withCredentials` is broken in MSIE)\n\nmethods\n---\n\nany HTTP verb will do\n\nheaders\n---\n\nused for both `Access-Control-Exposed-Headers` and `Access-Contral-Allowed-Headers`\n\n  * TODO make those separate\n\n\ncredentials\n---\n\nallows XHR2 clients to sepecify `withCredentials = true`, which will send `Cookies` and `HTTP Basic Auth`\n\n  * broken for XDR in MSIE\n\nresources\n---\n\nan array of \"directive\" objects\n\npattern\n---\n\n  * pattern (string prefix) - '/path/to' will match '/path/too...', '/path/to/res...', but NOT '/some/path/to...'\n  * pattern (RegExp) - use your own regex matching (to your own peril)\n    * Please see [http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex/6969486#6969486](Escape string for use in Javascript regex) to avoid ugly bugs when creating dynamic regex for paths\n\nTests\n===\n\nSee the /test folder. There are some example servers and some basic tests.\n\nLicense \n===\n\n(The MIT License)\n\nCopyright (c) 2010 Antono Vasiljev\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/antono/connect-cors/issues"
  },
  "_id": "connect-cors@0.5.1",
  "dist": {
    "shasum": "5f0890b845ff62d7fad46b03098b3cd982437986"
  },
  "_from": "connect-cors@~0.5",
  "_resolved": "https://registry.npmjs.org/connect-cors/-/connect-cors-0.5.1.tgz"
}
