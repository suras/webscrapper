{
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com",
    "url": "http://coolaj86.info"
  },
  "name": "json-storage",
  "description": "A wrapper for storage engines which use the W3C Storage API",
  "keywords": [
    "localStorage",
    "sessionStorage",
    "globalStorage",
    "Storage"
  ],
  "version": "1.1.3",
  "repository": {
    "type": "git",
    "url": "git://github.com/coolaj86/json-storage-js.git"
  },
  "engines": {
    "node": ">= v0.2.0"
  },
  "main": "index",
  "browserDependencies": {},
  "dependencies": {},
  "devDependencies": {},
  "readme": "JsonStorage\n====\n\nA light, sensible abstraction for DOMStorage (such as localStorage).\n\nInstallation\n===\n\nEnder.JS (Browser)\n\n    ender build json-storage\n\nNode.JS (Server)\n\n    npm install localStorage json-storage\n\nUsage\n===\n\nMade fo for Node.JS and Ender.JS (browser-side).\n\n    var localStorage = require('localStorage')\n      , JsonStorage = require('json-storage')\n      , store = JsonStorage.create(localStorage, 'my-widget-namespace')\n      , myValue = {\n            foo: \"bar\"\n          , baz: \"quux\"\n        }\n      ;\n\n    store.set('myKey', myValue); \n    myValue = store.get('myKey');\n\nAPI\n===\n\n  * `JsonStorage.create(DOMStorage, namespace)`\n    * `DOMStorage` should be globalStorage, sessionStorage, or localStorage\n    * `namespace` is optional string which allows multiple non-conflicting storage containers\n  * `store.get(key)`\n  * `store.set(key, value)`\n  * `store.remove(key)`\n  * `store.clear()`\n  * `store.keys()`\n  * `store.size()`\n  * `store.toJSON()`\n  * `JSON.stringify(store)`\n\nUpgrading from localStorage and 1.0.x to 1.1.x\n===\n\n1.1.x automatically attempts to upgrade your DOMStorage to use namespaces in backwards-compatible way.\n\nHowever, you can prevent this behaviour:\n\n    localStorage.getItem('_json-storage-namespaced_', true);\n\nnull vs undefined in JSON\n===\n\nThese notes do not reflect a bugs or defects in this library,\nthey're simply to inform you of a few 'gotchas' inherent in JSON / DOMStorage conversion.\n\n99.999% of the time these gotchas shouldn't effect you in any way.\nIf they do, you're probably doing something wrong in the first place.\n\n\nIt is not valid to set `undefined` in JSON. So setting a key to `undefined` will remove it from the store.\n\nThis means that `store.set('x')` is the same as `store.remove('x')`.\n\nTo save `undefined`, use `null` instead.\n\n\nNote that both values that exist as `null` and values that don't exist at all will return `null`.\n\n    store.set('existing-key', null);\n    null === store.get('existing-key');\n    null === store.get('non-existant-key');\n\n\nThe special case of `null` as `\"null\"`, aka `\"\\\"null\\\"\"`:\n\n`null`, and `\"null\"` both parse as `null` the \"object\", instead of one being the string (which would be `\"\\\"null\\\"\"`).\n\nObjects containing `null`, however, parse as expected `{ \"foo\": null, \"bar\": \"null\" }` will parse as `foo` being `null` but `bar` being `\"null\"`, much unlike the value `\"null\"` being parsed on its own.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/coolaj86/json-storage-js/issues"
  },
  "_id": "json-storage@1.1.3",
  "dist": {
    "shasum": "f3a24328e829f7229214b1ca9ad38f74b5aaa5ae"
  },
  "_from": "json-storage@1.x",
  "_resolved": "https://registry.npmjs.org/json-storage/-/json-storage-1.1.3.tgz"
}
